package de.uni_passau.fim.se2.util;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.Arrays;

/**
 * A mock for the class {@code CoverageTracker} to increase our independence from actual CUTs and
 * corresponding test suites. It reads serialized Java {@code boolean[][]} arrays and presents them
 * as coverage matrix. Test case names are autogenerated.
 */
public class CoverageTrackerMock implements CoverageTracker {

    /**
     * The default directory where coverage matrices are read from.
     */
    private static final String defaultDir = "./matrices";

    /**
     * Path pointing to the currently loaded matrix.
     */
    private final String path;

    /**
     * The deserialized coverage matrix.
     */
    private final boolean[][] coverageMatrix;

    /**
     * Autogenerated names for the test cases.
     */
    private final String[] testCases;

    /**
     * Creates a new {@code CoverageTracker mock} using the matrix pointed to by the given filename.
     *
     * @param fileName pointing to the coverage matrix
     * @throws IOException if an I/O error occurs while reading the serialized matrix
     * @throws ClassNotFoundException if the class of the serialized matrix could not be found
     * (should never happen since its an array)
     */
    public CoverageTrackerMock(final String fileName) throws IOException, ClassNotFoundException {
        this(fileName, defaultDir);
    }

    /**
     * Creates a new {@code CoverageTracker mock} using the matrix pointed to by the given filename
     * in the specified directory.
     *
     * @param fileName pointing to the coverage matrix
     * @param dirName the name of the directory containing the file
     * @throws IOException if an I/O error occurs while reading the serialized matrix
     * @throws ClassNotFoundException if the class of the serialized matrix could not be found
     * (should never happen since its an array)
     */
    public CoverageTrackerMock(final String fileName, final String dirName)
            throws IOException, ClassNotFoundException {
        if (fileName == null || fileName.isBlank()) {
            throw new IllegalArgumentException("Invalid matrix name: " + fileName);
        }

        if (dirName == null || dirName.isBlank()) {
            throw new IllegalArgumentException("Invalid directory name: " + dirName);
        }

        this.path = String.format("%s/%s.bin", dirName, fileName);
        this.coverageMatrix = deserializeMatrix(path);
        this.testCases = generateTestCaseNames(coverageMatrix.length);
    }

    /**
     * Tries to deserialize the coverage matrix pointed to by the given path as {@code boolean[][]}
     * array.
     *
     * @param path pointing to the serialized matrix
     * @return the deserialized matrix
     * @throws IOException if an I/O error occurs while reading the serialized matrix
     * @throws ClassNotFoundException if the class of the serialized matrix could not be found
     * (should never happen since its an array)
     */
    private static boolean[][] deserializeMatrix(final String path)
            throws IOException, ClassNotFoundException {
        try (final var in = new ObjectInputStream(new FileInputStream(path))) {
            return (boolean[][]) in.readObject();
        }
    }

    /**
     * Auto-generates a number of distinct test case names.
     *
     * @param count number of names to generate
     * @return generated names
     */
    private static String[] generateTestCaseNames(final int count) {
        final String[] names = new String[count];
        Arrays.setAll(names, i -> "test" + i);
        return names;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean[][] getCoverageMatrix() {
        return coverageMatrix;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getTestCases() {
        return testCases;
    }

    @Override
    public String toString() {
        return path;
    }
}
